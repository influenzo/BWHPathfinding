plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id "io.freefair.lombok" version "5.0.0-rc6"
}
mainClassName = 'edu.wpi.teamp.Main'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://apisite.crmyers.dev/maven'
    }


}

dependencies {
    implementation(
            'com.jfoenix:jfoenix:9.0.9',

            'org.apache.derby:derby:10.14.2.0',
            'org.mongodb:mongodb-driver-sync:4.0.2',

            'org.slf4j:slf4j-api:1.7.30',
            'org.slf4j:slf4j-simple:1.7.30',

            'com.google.maps:google-maps-services:0.13.0',
    )

    implementation('com.calendarfx:view:11.8.3') {
        exclude group: 'org.openjfx', module: ''
    }


    testImplementation(
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha',
    )
    testRuntimeOnly(
            'org.testfx:openjfx-monocle:jdk-11+26',
    )
    implementation 'org.jetbrains:annotations:15.0'
    compile group: 'com.google.inject', name: 'guice', version: '4.0'
    compile group: 'edu.wpi.cs3733.c20.teamR', name: 'AppointmentRequest', version:'5.0.0'
    compile group: 'edu.wpi.cs3733.d20.teamP', name: 'FoodRequest', version:'1.0.0'
    compile group: 'edu.wpi.cs3733.d20.teamB', name: 'IncidentReporting', version:'1.0.0'
    compile group: 'edu.wpi.cs3733.d20.teamD', name: 'InternalTransportRequest', version:'1.5.6'
    compile group: 'edu.wpi.cs3733.d20.teamE', name: 'onCallBedsAPI', version:'1.0.5'
    compile group: 'edu.wpi.cs3733.d20.teamK', name: 'MortuWaryRequests', version:'1.0.1'
    compile group: 'edu.wpi.cs3733.d20.teamN', name: 'sanitation', version:'1.8.4'
    compile group: 'edu.wpi.cs3733.d20.teamA', name: 'TeamAFlowerRequest', version:'1.1.2'
    compile group: 'edu.wpi.cs3733.d20.teamC', name: 'InterpreterRequest', version:'1.1.1'
    compile group: 'edu.wpi.cs3733.d20.teamM', name: 'AudioVisual', version:'1.0.1'
    compile group: 'edu.wpi.cs3733.d20.teamF', name: 'MaintenanceRequestAPI', version:'1.0.1'
    compile group: 'edu.wpi.cs3733.d20.teamL', name: 'GiftDeliveryServiceRequest', version:'1.0.0'
}

javafx {
    version = "11.0.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

run {
    jvmArgs = ['--add-opens=javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
               '--add-opens=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED',
               '--add-opens=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
               '--add-opens=javafx.base/com.sun.javafx.binding=ALL-UNNAMED',
               '--add-opens=javafx.base/com.sun.javafx.event=ALL-UNNAMED',
               '--add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
               '--add-opens=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED',
               '--add-opens=javafx.web/com.sun.javafx.scene.web=ALL-UNNAMED'
    ]
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def codeCoverageExcludes = [
        'edu.wpi.teamname.App',
        'edu.wpi.teamname.Main',
]

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0
            }
            excludes = codeCoverageExcludes
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
compileJava.dependsOn 'spotlessApply'

// uncomment to enable spotless checking
spotless {
    java {
        googleJavaFormat()
    }
}
